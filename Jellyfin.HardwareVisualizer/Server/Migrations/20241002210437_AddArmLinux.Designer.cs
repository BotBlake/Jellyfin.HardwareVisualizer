// <auto-generated />
using System;
using Jellyfin.HardwareVisualizer.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jellyfin.HardwareVisualizer.Server.Migrations
{
    [DbContext(typeof(HardwareVisualizerDataContext))]
    [Migration("20241002210437_AddArmLinux")]
    partial class AddArmLinux
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.CpuType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CpuTypes");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.FfmpegVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashMd5")
                        .HasColumnType("text");

                    b.Property<string>("HashSha256")
                        .HasColumnType("text");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VersionGroup")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("FfmpegVersions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3f734be-fb92-4a1f-bd8c-b6701e0f7e9f"),
                            HashMd5 = "73a6a7f9d02a9abbda0f6aadd39abc89",
                            HashSha256 = "824542b798f04c482b171417002c3aee94f880eec2aa1ee9f016de6d912e31bd",
                            PlatformId = new Guid("2c361be8-c0ec-4020-984b-66c620dad840"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/windows/latest-5.x/amd64/jellyfin-ffmpeg_5.1.4-3-portable_win64.zip",
                            Version = "5.1.6-3",
                            VersionGroup = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512")
                        },
                        new
                        {
                            Id = new Guid("7f9e0bb6-7346-400f-881c-33c3c1558d78"),
                            HashMd5 = "73a6a7f9d02a9abbda0f6aadd39abc89",
                            HashSha256 = "824542b798f04c482b171417002c3aee94f880eec2aa1ee9f016de6d912e31bd",
                            PlatformId = new Guid("79191671-caa0-4b52-8a9e-eaa2f040a1cc"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/windows/latest-5.x/amd64/jellyfin-ffmpeg_5.1.4-3-portable_win64.zip",
                            Version = "5.1.6-3",
                            VersionGroup = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512")
                        },
                        new
                        {
                            Id = new Guid("2c720157-f8fb-48c9-8686-d4dfe7daae9a"),
                            HashMd5 = "d41d8cd98f00b204e9800998ecf8427e",
                            HashSha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
                            PlatformId = new Guid("8d58b84b-73dc-4275-985d-123abe886818"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/linux/6.x/6.0.1-7/amd64/jellyfin-ffmpeg_6.0.1-7_portable_linux64-gpl.tar.xz",
                            Version = "6.0.1-7",
                            VersionGroup = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f")
                        },
                        new
                        {
                            Id = new Guid("501d7e27-8410-40af-b48d-1e7ce0002173"),
                            HashMd5 = "d41d8cd98f00b204e9800998ecf8427e",
                            HashSha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
                            PlatformId = new Guid("3657b420-2f2a-4940-8ed3-ee70b9b3720d"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/linux/6.x/6.0.1-7/amd64/jellyfin-ffmpeg_6.0.1-7_portable_linux64-gpl.tar.xz",
                            Version = "6.0.1-7",
                            VersionGroup = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f")
                        },
                        new
                        {
                            Id = new Guid("5af82644-47a0-4c0c-ab83-31a5dff71153"),
                            HashMd5 = "db3ede0396234e92991f45c5ef9058b7",
                            HashSha256 = "ed4061fc90e35ac405cb824dc99781481879a20e0a6b447934ddadd54bc40b3d",
                            PlatformId = new Guid("5aea52ab-60bf-4425-b412-c046a60ccc83"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/macos/7.x/7.0.2-3/x86_64/jellyfin-ffmpeg_7.0.2-3_portable_mac64-gpl.tar.xz",
                            Version = "7.0.2-3",
                            VersionGroup = new Guid("3504c0a3-19b6-418d-995e-c8731c9789a5")
                        },
                        new
                        {
                            Id = new Guid("413b53ed-e63f-4410-b901-492173cabf13"),
                            HashMd5 = "bc6b6e09b2ec13871250f866e87952e8",
                            HashSha256 = "4f3eb2bf612e989d218a26c822d5d008cf3c4eafc54cf41e7816fc2eefc73d10",
                            PlatformId = new Guid("6cf9234f-a4bb-4099-8fc8-675a653ba573"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/macos/7.x/7.0.2-3/arm64/jellyfin-ffmpeg_7.0.2-3_portable_macarm64-gpl.tar.xz",
                            Version = "7.0.2-3",
                            VersionGroup = new Guid("3504c0a3-19b6-418d-995e-c8731c9789a5")
                        },
                        new
                        {
                            Id = new Guid("fe43005a-d480-4113-af8a-8ebbc6392071"),
                            HashMd5 = "2ab051df11ff755b5b7f51937188e186",
                            HashSha256 = "e0e8fd50233578bc68db43b25f63984808c7604b7787b3a30d40aad66902daf8",
                            PlatformId = new Guid("ebe72964-459b-411e-a8da-2ff77c7370e4"),
                            Source = "https://repo.jellyfin.org/files/ffmpeg/linux/7.x/7.0.2-3/arm64/jellyfin-ffmpeg_7.0.2-3_portable_linuxarm64-gpl.tar.xz",
                            Version = "7.0.2-3",
                            VersionGroup = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f")
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.GpuType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GpuTypes");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareCodec", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HardwareCodecs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            Identifier = "h264",
                            Name = "H264"
                        },
                        new
                        {
                            Id = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            Identifier = "h265",
                            Name = "HVEC"
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareDisplay", b =>
                {
                    b.Property<string>("HardwareCodec")
                        .HasColumnType("text");

                    b.Property<string>("ToResolution")
                        .HasColumnType("text");

                    b.Property<string>("FromResolution")
                        .HasColumnType("text");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<float>("Diviation")
                        .HasColumnType("real");

                    b.Property<double>("MaxStreams")
                        .HasColumnType("double precision");

                    b.HasKey("HardwareCodec", "ToResolution", "FromResolution", "DeviceType", "DeviceName");

                    b.ToTable("HardwareDisplays");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CpuTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromHardwareCodecId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromResolutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GpuTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HardwareSurveySubmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxStreams")
                        .HasColumnType("integer");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToHardwareCodecId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToResolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CpuTypeId");

                    b.HasIndex("FromHardwareCodecId");

                    b.HasIndex("FromResolutionId");

                    b.HasIndex("GpuTypeId");

                    b.HasIndex("HardwareSurveySubmissionId");

                    b.HasIndex("ToHardwareCodecId");

                    b.HasIndex("ToResolutionId");

                    b.ToTable("HardwareSurveyEntries");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveySubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RawSurveySubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RawSurveySubmissionId");

                    b.ToTable("HardwareSurveySubmissions");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.MediaTestFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioCodec")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Bitrate")
                        .HasColumnType("bigint");

                    b.Property<string>("HashMd5")
                        .HasColumnType("text");

                    b.Property<string>("HashSha256")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoCodec")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaTestFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            AudioCodec = "",
                            Bitrate = 120L,
                            HashMd5 = "",
                            HashSha256 = "",
                            Name = "jellyfish-120-mbps-4k-uhd-hevc-10bit",
                            Size = 429L,
                            SourceUrl = "https://repo.jellyfin.org/jellyfish/media/jellyfish-120-mbps-4k-uhd-hevc-10bit.mkv",
                            VideoCodec = "HEVC"
                        },
                        new
                        {
                            Id = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            AudioCodec = "",
                            Bitrate = 120L,
                            HashMd5 = "",
                            HashSha256 = "",
                            Name = "jellyfish-120-mbps-4k-uhd-h264",
                            Size = 431L,
                            SourceUrl = "https://repo.jellyfin.org/jellyfish/media/jellyfish-120-mbps-4k-uhd-h264.mkv",
                            VideoCodec = "h264"
                        },
                        new
                        {
                            Id = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            AudioCodec = "",
                            Bitrate = 40L,
                            HashMd5 = "",
                            HashSha256 = "",
                            Name = "jellyfish-40-mbps-hd-hevc-10bit",
                            Size = 143L,
                            SourceUrl = "https://repo.jellyfin.org/jellyfish/media/jellyfish-40-mbps-hd-hevc-10bit.mkv",
                            VideoCodec = "HEVC"
                        },
                        new
                        {
                            Id = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            AudioCodec = "",
                            Bitrate = 40L,
                            HashMd5 = "",
                            HashSha256 = "",
                            Name = "jellyfish-40-mbps-hd-h264",
                            Size = 142L,
                            SourceUrl = "https://repo.jellyfin.org/jellyfish/media/jellyfish-40-mbps-hd-h264.mkv",
                            VideoCodec = "h264"
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Architecture")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReplacementId")
                        .HasColumnType("text");

                    b.Property<bool>("Supported")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VersionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c361be8-c0ec-4020-984b-66c620dad840"),
                            Architecture = 1,
                            DisplayName = "Windows 11",
                            Name = "Windows 11",
                            Supported = true,
                            Type = 0,
                            Version = "Windows 11 version 23H2",
                            VersionId = "22631"
                        },
                        new
                        {
                            Id = new Guid("79191671-caa0-4b52-8a9e-eaa2f040a1cc"),
                            Architecture = 1,
                            DisplayName = "Windows 10",
                            Name = "Windows 10",
                            Supported = true,
                            Type = 0,
                            Version = "Windows 10 version 22H2",
                            VersionId = "19045"
                        },
                        new
                        {
                            Id = new Guid("8d58b84b-73dc-4275-985d-123abe886818"),
                            Architecture = 1,
                            DisplayName = "Ubuntu Focal",
                            Name = "Ubuntu",
                            Supported = true,
                            Type = 1,
                            Version = "Ubuntu",
                            VersionId = "22.04"
                        },
                        new
                        {
                            Id = new Guid("3657b420-2f2a-4940-8ed3-ee70b9b3720d"),
                            Architecture = 1,
                            DisplayName = "Linux Generic",
                            Name = "Linux Generic",
                            Supported = true,
                            Type = 1,
                            Version = "Linux",
                            VersionId = "Generic"
                        },
                        new
                        {
                            Id = new Guid("ebe72964-459b-411e-a8da-2ff77c7370e4"),
                            Architecture = 2,
                            DisplayName = "Linux Generic",
                            Name = "Linux Generic",
                            Supported = true,
                            Type = 1,
                            Version = "Linux",
                            VersionId = "Generic"
                        },
                        new
                        {
                            Id = new Guid("5aea52ab-60bf-4425-b412-c046a60ccc83"),
                            Architecture = 1,
                            DisplayName = "Mac OS Darwin",
                            Name = "MacOS",
                            Supported = true,
                            Type = 2,
                            Version = "14.5",
                            VersionId = "14.5"
                        },
                        new
                        {
                            Id = new Guid("6cf9234f-a4bb-4099-8fc8-675a653ba573"),
                            Architecture = 2,
                            DisplayName = "Mac OS Darwin",
                            Name = "MacOS",
                            Supported = true,
                            Type = 2,
                            Version = "14.5",
                            VersionId = "14.5"
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.RawSurveySubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RawSurveySubmission");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Bitrate")
                        .HasColumnType("bigint");

                    b.Property<string>("FromResolution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MediaTestFileId")
                        .HasColumnType("uuid");

                    b.Property<int>("TestCaseType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ToCodecId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToResolution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaTestFileId");

                    b.HasIndex("ToCodecId");

                    b.ToTable("TestCases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cb98478-2cd0-a933-a217-7f62ba4296b9"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("5d38ebce-9eed-5cce-c7e2-97b5628d5928"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("f9cfcbd9-16fe-fd7e-cbc0-d81cbd7e7222"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("75dedf5a-dcd3-87b4-920f-5e5c8a4b83e0"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("afd972cd-6871-09e5-7699-c79e0465045d"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("3d15366d-1b37-899a-3ba4-d51e1909f4b3"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("9aa63ba5-b6ff-8c60-d3b4-cd55b63009ca"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("f3ede8bf-09b7-b566-7318-dfc773848230"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("d5f3bf12-6f07-3766-026d-d8d4bcae671a"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("17013de0-7658-1dcc-a089-2400cfc7e9c6"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("cb7bcbab-10a2-559a-e160-1020a0c69371"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("718c1cdf-fefe-7eb7-d7f1-6778ea981c07"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("addb22ae-0dc1-8fed-6aaf-b8e9bf47dd01"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("1f8f685a-a4e7-0a77-0f7c-4812f0c9ec2a"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("00995b99-6273-6479-a8cc-281c39220055"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("eabe402c-15ee-37cb-d79d-7a4616436a12"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("3deac177-a34d-aef8-94ff-6f85bcdf4e74"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("51110f29-e148-51c0-2ee5-6c141c97e2ca"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e8a75e65-a3f3-4d92-a45b-84e71a13efab"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("0acc12ee-646c-fa6e-95ec-2169b005b65a"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("ed6be34a-ab59-d54a-ffdb-5c73c6f067ff"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("5afbfaeb-f1aa-153c-1f6b-6a3f3a275bea"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("2c439fca-7fc0-cd98-f51c-613d79821ea0"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("b02255f9-7a19-60cd-454a-82b85456cb34"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("92fcef4a-9578-1a31-8fde-30a19aac800e"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("0f76301f-2d2c-9956-f74e-5ad5d3770fa3"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("28828d3c-2dae-699e-b386-61b1d5934793"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("ec4702ba-2408-c0e5-c730-7534bae94de7"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("fb2412a2-d6b9-97b5-cbe0-1781cfb7d090"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("3f51055b-f980-80a0-bc74-78799981d1ed"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("b674b2ff-ea30-cb0b-c4ca-75aeb1f32683"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("67ab4467-1525-33c2-89b1-18fbb8c40ccc"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("a84021fb-09b4-92ee-6f83-6959d826aef7"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("8af06227-176f-2239-bf74-f9192fb96bc1"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("0b733859-ead7-31ae-5573-81a53c941b5a"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("df500448-b4ce-c010-21be-4e6171a2313c"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("f446c813-739a-a79e-f589-51b7c69f1d14"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("e1e58b15-6664-454c-868a-20442db30557"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("c623840d-ee2c-4767-c215-77cc57276b15"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("907dfcad-39cf-573e-a890-b3ee4c5a2df4"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("c0a42d86-177a-9132-40a0-4cf796a48e5d"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("4181949f-7736-e8da-05c0-e332fdd9f171"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("8adde4d5-148c-b9c2-e2a5-a52056c8ef65"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("c0a479b3-542a-9401-1c92-7876c9ed25bb"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("9320e7cc-f591-1f6e-09b0-2ee79d40ed8e"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("b48784a1-8469-2883-4bcb-3e6a5db5cd9b"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("0040874e-d864-4bd9-9c1f-e3c43c82cb55"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("f2bb3221-1d1a-ebe2-edda-275e04a510c9"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("60284344-58f6-b4fd-9770-e474c5830901"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("fb0ec5b6-884d-8007-70fc-1c0228b04cd8"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("07d14d90-732b-3dfb-ec7a-3e01ee1df728"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("dc3c8e85-fa15-9558-03da-cbda27cdf373"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("b17b0590-ec50-0ca6-b087-123b24e73873"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("b43353c1-c4a6-b896-2db1-dd3758d27594"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("cce554a1-fe41-754c-0d15-ee49e0061ab2"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("010b1902-7763-8035-69ec-46382e54201d"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("70daebe7-c9fc-4e02-a524-2fc825a49355"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("5ece2013-57df-fc42-f446-23576d091006"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("c99a1b02-ada5-0269-260b-8fc44bec1669"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("0c6b257c-f3da-fc9d-b191-717b7ff3bc5f"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("60c49058-26e5-0999-31d8-991732d6dc07"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("68b3a945-b4bd-ee01-8066-455f20fa7f33"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("d151a3bd-cb93-2d79-2e64-ac92f308d33c"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("518d995c-689a-526f-159c-9be152c4831b"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("8e02f8b5-e252-ee6f-234c-48a7d43dc28f"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("0241259f-3645-f579-6736-7aec0d658edf"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("eb7eb7bd-9427-d3d0-f0b2-6d662fad558c"),
                            Bitrate = 79616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("6438d805-ae1b-d538-cf4d-333b4357636f"),
                            Bitrate = 9616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("34212c5f-df62-586f-17c0-b5ed9418593f"),
                            Bitrate = 3616000L,
                            FromResolution = "2160p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("88810e77-5c12-acbd-0c81-24aa36f197f6"),
                            Bitrate = 79616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("cad44d58-0323-9348-2e9c-2221ae8341b9"),
                            Bitrate = 9616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("4c21c242-ad3a-6e3e-1c15-fc2d35f203f2"),
                            Bitrate = 3616000L,
                            FromResolution = "1080p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        },
                        new
                        {
                            Id = new Guid("076e1c1e-d00f-e79b-662b-90ed2160a5ec"),
                            Bitrate = 79616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "2160p"
                        },
                        new
                        {
                            Id = new Guid("06bb694b-d724-cd98-71d6-b89f3edaeabe"),
                            Bitrate = 9616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "1080p"
                        },
                        new
                        {
                            Id = new Guid("03c34c33-b436-c77f-9262-3fa22a2667f0"),
                            Bitrate = 3616000L,
                            FromResolution = "720p",
                            MediaTestFileId = new Guid("1d943d13-586d-4562-a968-eb1d0ffae947"),
                            TestCaseType = 0,
                            ToCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            ToResolution = "720p"
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.TestCaseArgument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FfmpegArgument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FfmpegVersionGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FfmpegVersionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HardwareCodecId")
                        .HasColumnType("uuid");

                    b.Property<int>("TestCaseArgumentDeviceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FfmpegVersionId");

                    b.HasIndex("HardwareCodecId");

                    b.ToTable("TestCaseArguments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b089d568-0d35-6ee6-46ce-e99e83463c8c"),
                            FfmpegArgument = "-c:v h264 -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx264 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 0
                        },
                        new
                        {
                            Id = new Guid("f515178b-17a4-9e87-d0c4-5c8909012773"),
                            FfmpegArgument = "-c:v hevc -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx265 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 0
                        },
                        new
                        {
                            Id = new Guid("76e27726-975c-3d84-704e-e9ff06adf8e9"),
                            FfmpegArgument = "-init_hw_device cuda=cu:{gpu} -hwaccel cuda -hwaccel_output_format cuda -c:v h264_cuvid -i {video_file} -noautoscale -an -sn -vf \"scale_cuda=-1:{scale}:yuv420p\" -c:v h264_nvenc -preset p1 -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 1
                        },
                        new
                        {
                            Id = new Guid("096c37c5-8513-6035-cb50-0696dea7127d"),
                            FfmpegArgument = "-init_hw_device cuda=cu:{gpu} -hwaccel cuda -hwaccel_output_format cuda -c:v hevc_cuvid -i {video_file} -noautoscale -an -sn -vf \"scale_cuda=-1:{scale}:yuv420p\" -c:v hevc_nvenc -preset p1 -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 1
                        },
                        new
                        {
                            Id = new Guid("054cf7cf-7c53-36fb-da58-ac394e110595"),
                            FfmpegArgument = "-init_hw_device vaapi=va:/dev/dri/by-path/{gpu}-render -hwaccel vaapi -hwaccel_output_format vaapi -c:v h264 -i {video_file} -noautoscale -an -sn -vf scale_vaapi=-1:{scale}:format=nv12 -c:v h264_vaapi -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 2
                        },
                        new
                        {
                            Id = new Guid("6ee2be9c-8bed-f3f9-86c8-8a3d0ca7a7b9"),
                            FfmpegArgument = "-init_hw_device vaapi=va:/dev/dri/by-path/{gpu}-render -hwaccel vaapi -hwaccel_output_format vaapi -c:v hevc -i {video_file} -noautoscale -an -sn -vf scale_vaapi=-1:{scale}:format=nv12 -c:v hevc_vaapi -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 2
                        },
                        new
                        {
                            Id = new Guid("928b027e-8a08-f109-65a1-ddd6df7d3d46"),
                            FfmpegArgument = "-init_hw_device vaapi=va:/dev/dri/by-path/{gpu}-render -init_hw_device qsv=qs@va -hwaccel qsv -hwaccel_output_format qsv -c:v h264_qsv -i {video_file} -noautoscale -an -sn -vf scale_qsv=-1:{scale}:format=nv12 -c:v h264_qsv -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 3
                        },
                        new
                        {
                            Id = new Guid("504e45f1-7e32-75c9-dd86-5e86190621f2"),
                            FfmpegArgument = "-init_hw_device vaapi=va:/dev/dri/by-path/{gpu}-render -init_hw_device qsv=qs@va -hwaccel qsv -hwaccel_output_format qsv -c:v hevc_qsv -i {video_file} -noautoscale -an -sn -vf scale_qsv=-1:{scale}:format=nv12 -c:v hevc_qsv -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("9f9565f1-4661-484b-8c80-433bc909e70f"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 3
                        },
                        new
                        {
                            Id = new Guid("9de8a2e3-bd17-3fb2-6ce6-e3b43d9b84f5"),
                            FfmpegArgument = "-c:v h264 -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx264 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 0
                        },
                        new
                        {
                            Id = new Guid("4001db01-884a-e037-f42f-325556ea5856"),
                            FfmpegArgument = "-c:v hevc -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx265 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 0
                        },
                        new
                        {
                            Id = new Guid("29a9155f-59b9-90a9-b3d2-d46de28b15f7"),
                            FfmpegArgument = "-init_hw_device cuda=cu:{gpu} -hwaccel cuda -hwaccel_output_format cuda -c:v h264_cuvid -i {video_file} -noautoscale -an -sn -vf \"scale_cuda=-1:{scale}:yuv420p\" -c:v h264_nvenc -preset p1 -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 1
                        },
                        new
                        {
                            Id = new Guid("75faba7d-0ac7-08f1-be29-a7c6390735fd"),
                            FfmpegArgument = "-init_hw_device cuda=cu:{gpu} -hwaccel cuda -hwaccel_output_format cuda -c:v hevc_cuvid -i {video_file} -noautoscale -an -sn -vf \"scale_cuda=-1:{scale}:yuv420p\" -c:v hevc_nvenc -preset p1 -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 1
                        },
                        new
                        {
                            Id = new Guid("cd62b384-febe-8940-841d-0e88bb5444f0"),
                            FfmpegArgument = "-init_hw_device d3d11va:{gpu} -hwaccel d3d11va -hwaccel_output_format d3d11 -c:v h264 -i {video_file} -noautoscale -an -sn -vf \"scale=-1:{scale}:format=nv12\" -c:v h264_amf -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 2
                        },
                        new
                        {
                            Id = new Guid("0edf7887-8b64-e0ae-3b30-8fa0bc3c2fb8"),
                            FfmpegArgument = "-init_hw_device d3d11va:{gpu} -hwaccel d3d11va -hwaccel_output_format d3d11 -c:v hevc -i {video_file} -noautoscale -an -sn -vf \"scale=-1:{scale}:format=nv12\" -c:v hevc_amf -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 2
                        },
                        new
                        {
                            Id = new Guid("3861d421-ec9d-65b8-8447-74e0791f49aa"),
                            FfmpegArgument = "-init_hw_device d3d11va:{gpu} -hwaccel qsv -hwaccel_output_format qsv -c:v h264_qsv -i {video_file} -noautoscale -an -sn -vf \"scale_qsv=-1:{scale}:format=nv12\" -c:v h264_qsv -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 3
                        },
                        new
                        {
                            Id = new Guid("c39dfb4c-e02d-e917-4f82-d5acec7db708"),
                            FfmpegArgument = "-init_hw_device d3d11va:{gpu} -hwaccel qsv -hwaccel_output_format qsv -c:v hevc_qsv -i {video_file} -noautoscale -an -sn -vf \"scale_qsv=-1:{scale}:format=nv12\" -c:v hevc_qsv -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3b20be6a-7c32-41a0-a6ca-259937e69512"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 3
                        },
                        new
                        {
                            Id = new Guid("ddb9bd59-b4ea-1876-a0a4-f15c3777fb6d"),
                            FfmpegArgument = "-c:v h264 -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx264 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3504c0a3-19b6-418d-995e-c8731c9789a5"),
                            HardwareCodecId = new Guid("bf2065dc-9b03-48b8-9a30-206a12a6319c"),
                            TestCaseArgumentDeviceType = 0
                        },
                        new
                        {
                            Id = new Guid("913d48e0-9be3-4d51-c432-371747a7971f"),
                            FfmpegArgument = "-c:v hevc -i {video_file} -noautoscale -an -sn -vf \"scale=trunc(min(max(iw\\,ih*a)\\,{scale})/2)*2:trunc(ow/a/2)*2,format=yuv420p\" -c:v libx265 -preset veryfast -b:v {bitrate} -maxrate {bitrate} -f null - -benchmark",
                            FfmpegVersionGroupId = new Guid("3504c0a3-19b6-418d-995e-c8731c9789a5"),
                            HardwareCodecId = new Guid("104537db-e1e2-4490-a82a-afaede9a8fd4"),
                            TestCaseArgumentDeviceType = 0
                        });
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.TestResolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestResolutions");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.FfmpegVersion", b =>
                {
                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveyEntry", b =>
                {
                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.CpuType", "CpuType")
                        .WithMany()
                        .HasForeignKey("CpuTypeId");

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.HardwareCodec", "FromHardwareCodec")
                        .WithMany()
                        .HasForeignKey("FromHardwareCodecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.TestResolution", "FromResolution")
                        .WithMany()
                        .HasForeignKey("FromResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.GpuType", "GpuType")
                        .WithMany()
                        .HasForeignKey("GpuTypeId");

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveySubmission", "HardwareSurveySubmission")
                        .WithMany("HardwareSurveyEntry")
                        .HasForeignKey("HardwareSurveySubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.HardwareCodec", "ToHardwareCodec")
                        .WithMany()
                        .HasForeignKey("ToHardwareCodecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.TestResolution", "ToResolution")
                        .WithMany()
                        .HasForeignKey("ToResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CpuType");

                    b.Navigation("FromHardwareCodec");

                    b.Navigation("FromResolution");

                    b.Navigation("GpuType");

                    b.Navigation("HardwareSurveySubmission");

                    b.Navigation("ToHardwareCodec");

                    b.Navigation("ToResolution");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveySubmission", b =>
                {
                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.RawSurveySubmission", "RawSurveySubmission")
                        .WithMany()
                        .HasForeignKey("RawSurveySubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawSurveySubmission");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.TestCase", b =>
                {
                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.MediaTestFile", "MediaTestFile")
                        .WithMany("TestCases")
                        .HasForeignKey("MediaTestFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.HardwareCodec", "ToCodec")
                        .WithMany()
                        .HasForeignKey("ToCodecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaTestFile");

                    b.Navigation("ToCodec");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.TestCaseArgument", b =>
                {
                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.FfmpegVersion", null)
                        .WithMany("TestCaseArguments")
                        .HasForeignKey("FfmpegVersionId");

                    b.HasOne("Jellyfin.HardwareVisualizer.Server.Database.HardwareCodec", "HardwareCodec")
                        .WithMany()
                        .HasForeignKey("HardwareCodecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HardwareCodec");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.FfmpegVersion", b =>
                {
                    b.Navigation("TestCaseArguments");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.HardwareSurveySubmission", b =>
                {
                    b.Navigation("HardwareSurveyEntry");
                });

            modelBuilder.Entity("Jellyfin.HardwareVisualizer.Server.Database.MediaTestFile", b =>
                {
                    b.Navigation("TestCases");
                });
#pragma warning restore 612, 618
        }
    }
}
